import numpy as np
import scipy as sp
from ._model import Model
from ..utils import safe_isinstance, record_import_error
from ..utils.transformers import parse_prefix_suffix_for_tokenizer
from .. import models

try:
    import torch
except ImportError as e:
    record_import_error("torch", "Torch could not be imported!", e)

try:
    import tensorflow as tf
except ImportError as e:
    record_import_error("tensorflow", "TensorFlow could not be imported!", e)

class TeacherForcing(Model):
    def __init__(self, model, tokenizer=None, similarity_model=None, similarity_tokenizer=None, device=None):
        """ Generates scores (log odds) for output text explanation algorithms.

        This class supports generation of log odds for transformer models as well as functions. It also provides 
        functionality to score custom output text by passing the text_generate. In model agnostic
        cases (model is function) it expects a similarity_model and similarity_tokenizer to approximate log odd scores
        for target sentence generated by the model.

        Parameters
        ----------
        model: object or function
            A object of any pretrained transformer model or function which is to be explained.

        tokenizer: object
            A tokenizer object(PreTrainedTokenizer/PreTrainedTokenizerFast) which is used to tokenize source and target sentence.

        text_generate: function
            A function which is used to generate custom target ids. Log odds will be generated for these custom target ids.

        similarity_model: object
            A pretrained transformer model object which is used in model agnostic scenario to approximate log odds.

        similarity_tokenizer: object
            A tokenizer object(PreTrainedTokenizer/PreTrainedTokenizerFast) which is used to tokenize sentence in model agnostic scenario.

        device: "cpu" or "cuda" or None
            By default, it infers if system has a gpu and accordingly sets device. Should be 'cpu' or 'gpu'.

        Returns
        -------
        numpy.array
            The scores (log odds) of generating target sentence ids using the model.
        """
        super(TeacherForcing, self).__init__(model)

        #self.device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') if device is None else device 
        self.tokenizer = tokenizer
        # set pad token if not defined
        if self.tokenizer.pad_token is None:
            self.tokenizer.pad_token = self.tokenizer.bos_token

        self.device = device
        # assign text generation function
        if safe_isinstance(model,"transformers.PreTrainedModel") or safe_isinstance(model,"transformers.TFPreTrainedModel"):
            self.text_generate = models.TextGeneration(self.model, tokenizer=self.tokenizer, device=self.device)
            self.similarity_model = model
            self.similarity_tokenizer = tokenizer
            self.model_agnostic = False
        else:
            self.text_generate = models.TextGeneration(self.model, similarity_tokenizer=similarity_tokenizer, device=self.device)
            self.similarity_model = similarity_model
            self.similarity_tokenizer = similarity_tokenizer
            self.model_agnostic = True
        # initializing target which is the target sentence/ids for every new row of explanation
        self.output = None
        self.output_names = None
        
        if safe_isinstance(self.similarity_model,"transformers.PreTrainedModel"):
            self.similarity_model_type = "pt"
        else:
            self.similarity_model_type = "tf"

    def __call__(self, X, Y):
        """ Computes log odds scores from a given batch of masked input and original input for text/image.

        Parameters
        ----------
        masked_X: numpy.ndarray
            An array containing a list of masked inputs.

        X: numpy.ndarray
            An array containing a list of original inputs

        Returns
        -------
        numpy.ndarray
            A numpy array of log odds scores for every input pair (masked_X, X)
        """
        #output_batch=[]
        # caching updates output names and target sentence ids
        self.update_output_names(Y[:1])
        #source_sentence_ids, attention_mask = self.get_source_sentence_ids(masked_X)
        logits = self.get_teacher_forced_logits(X, Y)
        logodds = self.get_logodds(logits)
        #output_batch.append(logodds)
        return np.array(logodds)

    def update_output_names(self, output):
        """ The function updates original input(X) and target sentence ids.

        It mimics the caching mechanism to update the original input and target sentence ids
        that are to be explained and which updates for every new row of explanation.

        Parameters
        ----------
        X: string or numpy.array
            Input(Text/Image) for an explanation row.
        """
        # check if the source sentence has been updated (occurs when explaining a new row)
        if (self.output is None) or (not np.array_equal(self.output,output)):
            self.output = output
            self.output_names= self.get_output_names(output)
    
    def get_output_names(self, output):
        """ Gets the output tokens by computing the 
            output sentence ids and getting output names using the similarity_tokenizer.
        
        Parameters
        ----------
        output: numpy.ndarray
            Input(Text/Image) for an explanation row.

        Returns
        -------
        list
            A list of output tokens.
        """
        output_ids = self.get_outputs(output)
        output_names = [self.similarity_tokenizer.decode([x]).strip() for x in output_ids[0,:]]
        return output_names

    def get_outputs(self, X):
        """ Implement in subclass. Returns a tensor of sentence ids.
        """
        # check if output is a sentence or already parsed target ids
        if X.dtype.type is np.str_:
            parsed_tokenizer_dict = parse_prefix_suffix_for_tokenizer(self.similarity_tokenizer)
            keep_prefix, keep_suffix = parsed_tokenizer_dict['keep_prefix'], parsed_tokenizer_dict['keep_suffix']
            if keep_suffix > 0:
                output_ids = np.array(self.similarity_tokenizer(X.tolist(), padding=True)["input_ids"])[:,keep_prefix:-keep_suffix]
            else:
                output_ids = np.array(self.similarity_tokenizer(X.tolist(), padding=True)["input_ids"])[:,keep_prefix:]
        else:
            output_ids = X
        return output_ids

    def get_inputs(self, X, padding_side='right'):
        """ The function tokenizes source sentence.

        Parameters
        ----------
        X: numpy.ndarray
            X could be a batch of text or images.

        Returns
        -------
        numpy.ndarray
            Array of padded source sentence ids and attention mask.
        """
        if self.model_agnostic:
            # In model agnostic case, we first pass the input through the model and then tokenize output sentence
            input_sentences = np.array(self.model(X))
        else:
            input_sentences = np.array(X)
        # set tokenizer padding to prepare inputs for batch inferencing
        # padding_side="left" for only decoder models text generation eg. GPT2
        self.similarity_tokenizer.padding_side = padding_side
        inputs = self.similarity_tokenizer(input_sentences.tolist(), return_tensors=self.similarity_model_type, padding=True)
        #input_ids, attention_mask = np.array(padded_sequences["input_ids"]), np.array(padded_sequences["attention_mask"])
        # set tokenizer padding to default
        self.similarity_tokenizer.padding_side = 'right'
        return inputs

    def get_logodds(self, logits):
        """ Calculates log odds from logits.
        This function passes the logits through softmax and then computes log odds for the target sentence ids.
        Parameters
        ----------
        logits: numpy.array
            An array of logits generated from the model.
        Returns
        -------
        numpy.array
            Computes log odds for corresponding target sentence ids.
        """
        # set output ids for which scores are to be extracted
        if self.output.dtype.type is np.str_:
            output_ids = self.get_outputs(self.output)[0]
        else:
            output_ids = self.output[0]
        
        def calc_logodds(arr):
            probs = np.exp(arr) / np.exp(arr).sum(-1)
            logodds = sp.special.logit(probs)
            return logodds

        # pass logits through softmax, get the token corresponding score and convert back to log odds (as one vs all)
        logodds = np.apply_along_axis(calc_logodds, 2, logits)

        logodds_for_output_ids = logodds[:,np.array(range(logodds.shape[1])),output_ids]

        return logodds_for_output_ids

    def model_inference(self, inputs, output_ids):
        if self.similarity_model_type == "pt":
            # create torch tensors and move to device
            device = torch.device('cuda' if torch.cuda.is_available() else 'cpu') if self.device is None else self.device
            inputs = inputs.to(device)
            if output_ids is not None:
                output_ids = torch.tensor(output_ids, dtype=torch.int64, device=device)
            self.similarity_model.eval()
            with torch.no_grad():
                if self.similarity_model.config.is_encoder_decoder:
                    outputs = self.similarity_model(**inputs, decoder_input_ids=output_ids, labels=output_ids, return_dict=True)
                else:
                    # combine source and target sentence ids to pass into decoder eg: in case of distillgpt2
                    inputs["input_ids"] = torch.cat((inputs["input_ids"],output_ids),dim=-1)
                    attention_mask_for_output_ids = torch.ones(output_ids.shape, dtype=output_ids.dtype, device=device)
                    inputs["attention_mask"] = torch.cat((inputs["attention_mask"],attention_mask_for_output_ids),dim=-1)
                    outputs = self.similarity_model(**inputs, return_dict=True)
                logits=outputs.logits.detach().cpu().numpy().astype('float64')
        elif self.similarity_model_type == "tf":
            if output_ids is not None:
                output_ids = tf.convert_to_tensor(output_ids, dtype=tf.int32)

            if self.similarity_model.config.is_encoder_decoder:
                if self.device is None:
                    outputs = self.similarity_model(inputs, decoder_input_ids=output_ids, labels=output_ids, return_dict=True)
                else:
                    try:
                        with tf.device(self.device):
                            outputs = self.similarity_model(inputs, decoder_input_ids=output_ids, labels=output_ids, return_dict=True)
                    except RuntimeError as e:
                        print(e)
            else:
                # combine source and target sentence ids to pass into decoder eg: in case of distillgpt2
                inputs["input_ids"] = tf.concat((inputs["input_ids"],output_ids),axis=-1)
                attention_mask_for_output_ids = tf.ones(output_ids.shape, dtype=output_ids.dtype)
                inputs["attention_mask"] = tf.concat((inputs["attention_mask"],attention_mask_for_output_ids),axis=-1)
                if self.device is None:
                    outputs = self.similarity_model(inputs, return_dict=True)
                else:
                    try:
                        with tf.device(self.device):
                            outputs = self.similarity_model(inputs, return_dict=True)
                    except RuntimeError as e:
                        print(e)
            logits=outputs.logits.numpy().astype('float64')
        return logits
    
    def get_teacher_forced_logits(self, X, Y):
        """ The function generates logits for transformer models.

        It generates logits for encoder-decoder models as well as decoder only models by using the teacher forcing technique.

        Parameters
        ----------
        source_sentence_ids: 2D tensor of shape (batch size, len of sequence)
            Tokenized ids fed to the model.

        target_sentence_ids: 2D tensor of shape (batch size, len of sequence)
            Tokenized ids for which logits are generated using the decoder.

        Returns
        -------
        numpy.array
            Decoder output logits for target sentence ids.
        """
        # check if type of model architecture assigned in model config
        if (hasattr(self.similarity_model.config, "is_encoder_decoder") and not self.similarity_model.config.is_encoder_decoder) \
            and (hasattr(self.similarity_model.config, "is_decoder") and not self.similarity_model.config.is_decoder):
            raise ValueError(
                "Please assign either of is_encoder_decoder or is_decoder to True in model config for extracting target sentence ids"
            )

        # get output ids for teacher forcing
        output_ids = self.get_outputs(Y)

        if self.similarity_model.config.is_encoder_decoder:
            # set pad token if not defined
            if self.similarity_tokenizer.pad_token is None:
                self.similarity_tokenizer.pad_token = self.similarity_tokenizer.eos_token
            # encode batched inputs by padding on the right side
            inputs = self.get_inputs(X, padding_side='right')
            # assigning decoder start token id as it is needed for encoder decoder model generation
            decoder_start_token_id = None
            if hasattr(self.similarity_model.config, "decoder_start_token_id") and self.similarity_model.config.decoder_start_token_id is not None:
                decoder_start_token_id = self.similarity_model.config.decoder_start_token_id
            elif hasattr(self.similarity_model.config, "bos_token_id") and self.similarity_model.config.bos_token_id is not None:
                decoder_start_token_id = self.similarity_model.config.bos_token_id
            elif (hasattr(self.similarity_model.config, "decoder") and hasattr(self.similarity_model.config.decoder, "bos_token_id") and self.similarity_model.config.decoder.bos_token_id is not None):
                decoder_start_token_id = self.similarity_model.config.decoder.bos_token_id
            else:
                raise ValueError(
                    "No decoder_start_token_id or bos_token_id defined in config for encoder-decoder generation"
                )
            # concat decoder start token id to target sentence ids
            output_start_id = np.ones((output_ids.shape[0], 1)) * decoder_start_token_id
            output_ids = np.concatenate((output_start_id,output_ids),axis=-1)
            # generate outputs and logits
            logits = self.model_inference(inputs, output_ids)
            logits=logits[:,:-1,:]
        else:
            # encode batched inputs by padding on the left side
            inputs = self.get_inputs(X, padding_side='left')
            # generate outputs and logits
            logits = self.model_inference(inputs, output_ids)
            # extract only logits corresponding to target sentence ids
            logits=logits[:,-output_ids.shape[1]-1:-1,:]
        return logits

